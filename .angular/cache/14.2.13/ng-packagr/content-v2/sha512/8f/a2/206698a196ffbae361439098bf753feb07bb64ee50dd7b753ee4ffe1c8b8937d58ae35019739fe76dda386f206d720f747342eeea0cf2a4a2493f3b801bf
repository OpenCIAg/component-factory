{"hash":"4d528f1ad46f9572ca6bae1fc5fa1dfd5d26bce8","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injector, Injectable, NgModule } from '@angular/core';\n\nclass ComponentFactoryService {\n    constructor(factoryResolver, injector, appRef) {\n        this.factoryResolver = factoryResolver;\n        this.injector = injector;\n        this.appRef = appRef;\n    }\n    /**\n     * Cria uma fabrica para gerar **novas** instancias de um mesmo componente\n     *\n     * @template T\n     * @param {Type<T>} component\n     * @returns {ComponentFactory<T>}\n     */\n    createFactory(component) {\n        return this.factoryResolver.resolveComponentFactory(component);\n    }\n    /**\n     * Possibilita o usuário criar serviços através de classes ou objetos passados manualmente\n     * @example\n     * class Greeter{\n     * constructor(public name:string)\n     *  hello(){\n     *    return `hello ${this.name}`\n     *  }\n     * }\n     *\n     * this.componentFactoryService.createCustomInjector([{ provide: GreeterService, useValue: new GreeterService('john') }])\n     * @param {StaticProvider[]} providers\n     * @returns {Injector}\n     */\n    createCustomInjector(providers, parentInjector = this.injector) {\n        return Injector.create({ providers, parent: parentInjector });\n    }\n    create(component, instance, options = { attachView: true }) {\n        const componentFactory = this.createFactory(component);\n        this.constRef = componentFactory.create(options.injector || this.injector);\n        Object.assign(this.constRef.instance, instance);\n        if (options.attachView) {\n            this.appRef.attachView(this.constRef.hostView);\n        }\n        // this.constRef.onDestroy = () => { };\n        return this.constRef;\n    }\n}\nComponentFactoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable });\nComponentFactoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; } });\n\nclass ComponentFactoryModule {\n}\nComponentFactoryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nComponentFactoryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule });\nComponentFactoryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule, providers: [\n        ComponentFactoryService\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        ComponentFactoryService\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of component-factory\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFactoryModule, ComponentFactoryService };\n//# sourceMappingURL=ciag-component-factory.mjs.map\n","map":{"version":3,"file":"ciag-component-factory.mjs","sources":["../../../../projects/ciag/component-factory/src/lib/component-factory.service.ts","../../../../projects/ciag/component-factory/src/lib/component-factory.module.ts","../../../../projects/ciag/component-factory/src/public-api.ts","../../../../projects/ciag/component-factory/src/ciag-component-factory.ts"],"sourcesContent":["import {\n  Injectable,\n  ComponentFactoryResolver,\n  Injector,\n  ApplicationRef,\n  Type,\n  ComponentRef,\n  StaticProvider,\n  ComponentFactory\n} from '@angular/core';\n\n@Injectable()\nexport class ComponentFactoryService {\n  constRef?: ComponentRef<unknown>;\n\n  constructor(private factoryResolver: ComponentFactoryResolver, private injector: Injector, private appRef: ApplicationRef) {}\n  /**\n   * Cria uma fabrica para gerar **novas** instancias de um mesmo componente\n   *\n   * @template T\n   * @param {Type<T>} component\n   * @returns {ComponentFactory<T>}\n   */\n  createFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this.factoryResolver.resolveComponentFactory(component);\n  }\n\n  /**\n   * Possibilita o usuário criar serviços através de classes ou objetos passados manualmente\n   * @example\n   * class Greeter{\n   * constructor(public name:string)\n   *  hello(){\n   *    return `hello ${this.name}`\n   *  }\n   * }\n   *\n   * this.componentFactoryService.createCustomInjector([{ provide: GreeterService, useValue: new GreeterService('john') }])\n   * @param {StaticProvider[]} providers\n   * @returns {Injector}\n   */\n  createCustomInjector(providers: StaticProvider[], parentInjector = this.injector) {\n    return Injector.create({ providers, parent: parentInjector });\n  }\n\n  create<T>(\n    component: Type<T>,\n    instance?: Partial<T>,\n    options: { injector?: Injector; attachView?: boolean } = { attachView: true }\n  ): ComponentRef<T> {\n    const componentFactory = this.createFactory(component);\n    this.constRef = componentFactory.create(options.injector || this.injector);\n\n    Object.assign(this.constRef.instance, instance);\n\n    if (options.attachView) {\n      this.appRef.attachView(this.constRef.hostView);\n    }\n\n    // this.constRef.onDestroy = () => { };\n    return this.constRef as ComponentRef<T>;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ComponentFactoryService } from './component-factory.service';\n\n\n\n@NgModule({\n  providers:[\n    ComponentFactoryService\n  ]\n})\nexport class ComponentFactoryModule { }\n","/*\n * Public API Surface of component-factory\n */\n\nexport * from './lib/component-factory.service';\nexport * from './lib/component-factory.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;MAYa,uBAAuB,CAAA;AAGlC,IAAA,WAAA,CAAoB,eAAyC,EAAU,QAAkB,EAAU,MAAsB,EAAA;QAArG,IAAe,CAAA,eAAA,GAAf,eAAe,CAA0B;QAAU,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAAU,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;KAAI;AAC7H;;;;;;AAMG;AACH,IAAA,aAAa,CAAI,SAAkB,EAAA;QACjC,OAAO,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;KAChE;AAED;;;;;;;;;;;;;AAaG;AACH,IAAA,oBAAoB,CAAC,SAA2B,EAAE,cAAc,GAAG,IAAI,CAAC,QAAQ,EAAA;AAC9E,QAAA,OAAO,QAAQ,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;KAC/D;IAED,MAAM,CACJ,SAAkB,EAClB,QAAqB,EACrB,UAAyD,EAAE,UAAU,EAAE,IAAI,EAAE,EAAA;QAE7E,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACvD,QAAA,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE3E,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAEhD,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAChD,SAAA;;QAGD,OAAO,IAAI,CAAC,QAA2B,CAAC;KACzC;;oHAjDU,uBAAuB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,wBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,QAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;wHAAvB,uBAAuB,EAAA,CAAA,CAAA;2FAAvB,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBADnC,UAAU;;;MCDE,sBAAsB,CAAA;;mHAAtB,sBAAsB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;oHAAtB,sBAAsB,EAAA,CAAA,CAAA;AAAtB,sBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,sBAAsB,EAJvB,SAAA,EAAA;QACR,uBAAuB;AACxB,KAAA,EAAA,CAAA,CAAA;2FAEU,sBAAsB,EAAA,UAAA,EAAA,CAAA;kBALlC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,SAAS,EAAC;wBACR,uBAAuB;AACxB,qBAAA;AACF,iBAAA,CAAA;;;ACTD;;AAEG;;ACFH;;AAEG;;;;"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injector, Injectable, NgModule } from '@angular/core';\n\nclass ComponentFactoryService {\n    constructor(factoryResolver, injector, appRef) {\n        this.factoryResolver = factoryResolver;\n        this.injector = injector;\n        this.appRef = appRef;\n    }\n    /**\n     * Cria uma fabrica para gerar **novas** instancias de um mesmo componente\n     *\n     * @template T\n     * @param {Type<T>} component\n     * @returns {ComponentFactory<T>}\n     */\n    createFactory(component) {\n        return this.factoryResolver.resolveComponentFactory(component);\n    }\n    /**\n     * Possibilita o usuário criar serviços através de classes ou objetos passados manualmente\n     * @example\n     * class Greeter{\n     * constructor(public name:string)\n     *  hello(){\n     *    return `hello ${this.name}`\n     *  }\n     * }\n     *\n     * this.componentFactoryService.createCustomInjector([{ provide: GreeterService, useValue: new GreeterService('john') }])\n     * @param {StaticProvider[]} providers\n     * @returns {Injector}\n     */\n    createCustomInjector(providers, parentInjector = this.injector) {\n        return Injector.create({ providers, parent: parentInjector });\n    }\n    create(component, instance, options = { attachView: true }) {\n        const componentFactory = this.createFactory(component);\n        this.constRef = componentFactory.create(options.injector || this.injector);\n        Object.assign(this.constRef.instance, instance);\n        if (options.attachView) {\n            this.appRef.attachView(this.constRef.hostView);\n        }\n        // this.constRef.onDestroy = () => { };\n        return this.constRef;\n    }\n}\nComponentFactoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable });\nComponentFactoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; } });\n\nclass ComponentFactoryModule {\n}\nComponentFactoryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nComponentFactoryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule });\nComponentFactoryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule, providers: [\n        ComponentFactoryService\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.3.0\", ngImport: i0, type: ComponentFactoryModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        ComponentFactoryService\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of component-factory\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFactoryModule, ComponentFactoryService };\n//# sourceMappingURL=ciag-component-factory.mjs.map\n","map":{"version":3,"file":"ciag-component-factory.mjs","sources":["../../../../projects/ciag/component-factory/src/lib/component-factory.service.ts","../../../../projects/ciag/component-factory/src/lib/component-factory.module.ts","../../../../projects/ciag/component-factory/src/public-api.ts","../../../../projects/ciag/component-factory/src/ciag-component-factory.ts"],"sourcesContent":["import {\n  Injectable,\n  ComponentFactoryResolver,\n  Injector,\n  ApplicationRef,\n  Type,\n  ComponentRef,\n  StaticProvider,\n  ComponentFactory\n} from '@angular/core';\n\n@Injectable()\nexport class ComponentFactoryService {\n  constRef?: ComponentRef<unknown>;\n\n  constructor(private factoryResolver: ComponentFactoryResolver, private injector: Injector, private appRef: ApplicationRef) {}\n  /**\n   * Cria uma fabrica para gerar **novas** instancias de um mesmo componente\n   *\n   * @template T\n   * @param {Type<T>} component\n   * @returns {ComponentFactory<T>}\n   */\n  createFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this.factoryResolver.resolveComponentFactory(component);\n  }\n\n  /**\n   * Possibilita o usuário criar serviços através de classes ou objetos passados manualmente\n   * @example\n   * class Greeter{\n   * constructor(public name:string)\n   *  hello(){\n   *    return `hello ${this.name}`\n   *  }\n   * }\n   *\n   * this.componentFactoryService.createCustomInjector([{ provide: GreeterService, useValue: new GreeterService('john') }])\n   * @param {StaticProvider[]} providers\n   * @returns {Injector}\n   */\n  createCustomInjector(providers: StaticProvider[], parentInjector = this.injector) {\n    return Injector.create({ providers, parent: parentInjector });\n  }\n\n  create<T>(\n    component: Type<T>,\n    instance?: Partial<T>,\n    options: { injector?: Injector; attachView?: boolean } = { attachView: true }\n  ): ComponentRef<T> {\n    const componentFactory = this.createFactory(component);\n    this.constRef = componentFactory.create(options.injector || this.injector);\n\n    Object.assign(this.constRef.instance, instance);\n\n    if (options.attachView) {\n      this.appRef.attachView(this.constRef.hostView);\n    }\n\n    // this.constRef.onDestroy = () => { };\n    return this.constRef as ComponentRef<T>;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ComponentFactoryService } from './component-factory.service';\n\n\n\n@NgModule({\n  providers:[\n    ComponentFactoryService\n  ]\n})\nexport class ComponentFactoryModule { }\n","/*\n * Public API Surface of component-factory\n */\n\nexport * from './lib/component-factory.service';\nexport * from './lib/component-factory.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;MAYa,uBAAuB,CAAA;AAGlC,IAAA,WAAA,CAAoB,eAAyC,EAAU,QAAkB,EAAU,MAAsB,EAAA;AAArG,QAAA,IAAe,CAAA,eAAA,GAAf,eAAe,CAA0B;AAAU,QAAA,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAAU,QAAA,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;KAAI;AAC7H;;;;;;AAMG;AACH,IAAA,aAAa,CAAI,SAAkB,EAAA;QACjC,OAAO,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;KAChE;AAED;;;;;;;;;;;;;AAaG;AACH,IAAA,oBAAoB,CAAC,SAA2B,EAAE,cAAc,GAAG,IAAI,CAAC,QAAQ,EAAA;AAC9E,QAAA,OAAO,QAAQ,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;KAC/D;IAED,MAAM,CACJ,SAAkB,EAClB,QAAqB,EACrB,UAAyD,EAAE,UAAU,EAAE,IAAI,EAAE,EAAA;QAE7E,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACvD,QAAA,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE3E,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAEhD,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAChD,SAAA;;QAGD,OAAO,IAAI,CAAC,QAA2B,CAAC;KACzC;;oHAjDU,uBAAuB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,wBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,QAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;wHAAvB,uBAAuB,EAAA,CAAA,CAAA;2FAAvB,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBADnC,UAAU;;;MCDE,sBAAsB,CAAA;;mHAAtB,sBAAsB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;oHAAtB,sBAAsB,EAAA,CAAA,CAAA;AAAtB,sBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,sBAAsB,EAJvB,SAAA,EAAA;QACR,uBAAuB;AACxB,KAAA,EAAA,CAAA,CAAA;2FAEU,sBAAsB,EAAA,UAAA,EAAA,CAAA;kBALlC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,SAAS,EAAC;wBACR,uBAAuB;AACxB,qBAAA;iBACF,CAAA;;;ACTD;;AAEG;;ACFH;;AAEG;;;;"}}}